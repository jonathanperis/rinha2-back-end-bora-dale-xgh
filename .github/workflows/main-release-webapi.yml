name: Main Release Pipeline

on:
  push:
    branches:
      - main

env:
  AOT: true
  TRIM: false
  EXTRA_OPTIMIZE: true
  BUILD_ARCHITECTURE: linux-x64
  BUILD_CONFIGURATION: Release   

jobs:
  setup-build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./src/WebApi"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
            
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Restore Dependencies
        run: dotnet restore -r ${{ env.BUILD_ARCHITECTURE }} "WebApi.csproj" -p:Configuration=${${{ env.BUILD_CONFIGURATION }}} -p:AOT=${${{ env.AOT }}} -p:Trim=${${{ env.TRIM }}}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
  
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          updateAssemblyInfo: true

      - name: Build Application
        run: dotnet build -r ${{ env.BUILD_ARCHITECTURE }} "WebApi.csproj" -c ${{ env.BUILD_CONFIGURATION }} -p:AOT=${${{ env.AOT }}} -p:Trim=${${{ env.TRIM }}} -p:ExtraOptimize=${${{ env.EXTRA_OPTIMIZE }}} -p:Version=${{ env.GitVersion_SemVer }}

  build-push-image:
    needs: setup-build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./src/
          file: ./src/WebApi/Dockerfile
          push: true
          tags: jonathanperis/rinha2-back-end-bora-dale-xgh:latest
          build-args: |
            AOT=${{ env.AOT }}
            TRIM=${{ env.TRIM }}
            EXTRA_OPTIMIZE=${{ env.EXTRA_OPTIMIZE }}
            BUILD_ARCHITECTURE=${{ env.BUILD_ARCHITECTURE }}
            BUILD_CONFIGURATION=${{ env.BUILD_CONFIGURATION }}

  container-test:
    needs: build-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Build and Run Docker Compose for Healthcheck Test
        run: |
          docker compose -f ./prod/docker-compose.yml up nginx -d
          sleep 10

      - name: Test Healthcheck Endpoint
        run: |
          for i in {1..20}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9999/healthz)
            if [ "$STATUS" -eq 200 ]; then
              echo "Healthcheck passed with status $STATUS"
              exit 0
            else
              echo "Healthcheck attempt $i failed with status $STATUS. Retrying..."
              sleep 2
            fi
          done
          echo "Healthcheck failed after 20 attempts."
          exit 1

  load-test:
    runs-on: ubuntu-latest
    needs: container-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Build and Run Docker Compose for Load Test
        run: |
          docker compose -f ./prod/docker-compose.yml up k6 --build --force-recreate 
          sleep 10

      # - name: Listing Files recursively
      #   run: find . -printf '%y %p\n'

      - name: Upload Stress Test Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: stress-test-report
          path: ./prod/conf/stress-test/reports/stress-test-report.html
          # retention-days: 7

      - name: Install Git
        run: sudo apt-get update && sudo apt-get install -y git

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy Report to GitHub Pages (Commit to Main Repository)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Calculate timestamp for renaming
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          REPORT_NAME="stress-test-report-${TIMESTAMP}.html"
          
          # Clone the main repository into a temporary folder
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/jonathanperis/rinha2-back-end-bora-dale-xgh.git repo-temp
          cd repo-temp
          
          # Create the destination folder under docs/gh-pages/reports
          mkdir -p docs/gh-pages/reports
          
          # Copy and rename the stress test report into the destination folder
          cp ../prod/conf/stress-test/reports/stress-test-report.html docs/gh-pages/reports/${REPORT_NAME}
          
          # Configure Git user
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Stage, commit, and push the changes to the main branch of the repository
          git add docs/gh-pages/reports/${REPORT_NAME}
          git commit -m "Deploy stress test report as ${REPORT_NAME} to GitHub Pages (committed into main)"
          git push origin main